# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MTWrXIIzTYJ_VlP1u5BX-mlZJ7IXwn3M
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import keras

# Importing dataset
data = pd.read_csv("/content/Churn_Modelling.csv")
x = data.iloc[: , 3:13]
y = data.iloc[: , 13]

# Creating dummy variables
geography = pd.get_dummies(x["Geography"], drop_first = True)
gender = pd.get_dummies(x["Gender"], drop_first = True)

# Concatenate the data frames
x = pd.concat([x, geography, gender], axis = 1)

# Drop unnecesssary columns
x = x.drop(["Geography", "Gender"], axis = 1)

#Splitting the dataset into training and testing set
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

from keras.models import Sequential
from keras.layers import Dense
#from keras.layers import LeakyReLU, PReLU, ELU
from keras.layers import Dropout

classifier = Sequential()

classifier.add(Dense(units = 5, kernel_initializer = "he_uniform", activation = "relu", input_dim = 11))

classifier.add(Dense(units = 10, kernel_initializer = "he_uniform", activation = "relu"))

classifier.add(Dense(units = 5, kernel_initializer = "he_uniform", activation = "relu"))

classifier.add(Dense(units = 1, kernel_initializer = "glorot_uniform", activation = "sigmoid"))

classifier.compile(optimizer = "adam", loss = "binary_crossentropy", metrics = ["accuracy"])

model_history = classifier.fit(x_train, y_train, validation_split = 0.2, batch_size = 20, epochs = 20)

print(model_history.history.keys())

plt.plot(model_history.history["accuracy"])
plt.plot(model_history.history["val_accuracy"])
plt.title("Model Accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Train", "Test"], loc = "upper left")
plt.show()

plt.plot(model_history.history["loss"])
plt.plot(model_history.history["val_loss"])
plt.title("Model Loss")
plt.ylabel("Loss")
plt.xlabel("Epoch")
plt.legend(["Train", "Test"], loc = "upper left")
plt.show()

y_pred = classifier.predict(x_test)
y_pred = (y_pred > 0.5)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

from sklearn.metrics import accuracy_score
score=accuracy_score(y_pred,y_test)

print(score)
print(cm)